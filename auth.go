package main

import (
	"fmt"
	"log"
	"net/http"

	"github.com/zmb3/spotify"
)

var (
	authChannel   = make(chan *spotify.Client, 1)
	redirectURI   = fmt.Sprintf("http://%s:8080/callback", endpoint)
	authenticator = spotify.NewAuthenticator(redirectURI, spotify.ScopeUserReadCurrentlyPlaying, spotify.ScopeUserReadPlaybackState, spotify.ScopeUserModifyPlaybackState)
	state         = "authState"
)

// Provides a login path at /auth which redirects to the endpoint generated by the auth flow
func authRedirectHandler(w http.ResponseWriter, r *http.Request) {
	url := <-authUrlChan
	http.Redirect(w, r, url, 302)
}

// Shows the auth prompt for the user, and returns the authenticated client back from the channel
func getClientForUser() *spotify.Client {
	defer close(authChannel)

	url := authenticator.AuthURL(state)
	authUrlChan <- url

	fmt.Println("Log in to Spotify to continue:", url)

	return <-authChannel
}

func handleAuthCallback(w http.ResponseWriter, r *http.Request) {
	tok, err := authenticator.Token(state, r)
	if err != nil {
		http.Error(w, "Couldn't get token", http.StatusForbidden)
		log.Fatal(err)
	}
	if st := r.FormValue("state"); st != state {
		http.NotFound(w, r)
		log.Fatalf("State mismatch: %s != %s\n", st, state)
	}
	// use the token to get an authenticated client
	client := authenticator.NewClient(tok)
	w.Header().Set("Content-Type", "text/html")
	fmt.Fprintf(w, "Login Completed!"+html)
	authChannel <- &client
}
